version: "3"
services:
  userservice:
    build:
      context: .
      dockerfile: Dockerfile
      target: userservice
    container_name: userservice
    env_file:
      - ./userservice/.env
    depends_on:
      - userservice_db
    restart: always
    ports:
      - "8081:8080"
    networks:
      - backend

  productservice:
    build:
      context: .
      dockerfile: Dockerfile
      target: productservice
    container_name: productservice
    restart: always
    env_file:
      - ./productservice/.env
    depends_on:
      - productservice_db
    ports:
      - "8082:8080"
    networks:
      - backend

  orderservice:
    build:
      context: .
      dockerfile: Dockerfile
      target: orderservice
    container_name: orderservice
    restart: always
    env_file:
      - ./orderservice/.env
    depends_on:
      - orderservice_db
    ports:
      - "8083:8080"
    networks:
      - backend


  graphqlgateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: graphqlgateway
    container_name: graphqlgateway
    restart: always
    depends_on:
      - orderservice
      - productservice
      - userservice
    ports:
      - "8084:8080"
    networks:
      - backend

  userservice_db:
    image: postgres:13
    container_name: userservice_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: userservice_db
    ports:
      - "5433:5432"
    restart: always
    volumes:
      - userservice_db_data:/var/lib/postgresql/data
    networks:
      - backend

  productservice_db:
    image: postgres:13
    container_name: productservice_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: productservice_db
    ports:
      - "5434:5432"
    volumes:
      - productservice_db_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: always

  orderservice_db:
    image: postgres:13
    container_name: orderservice_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orderservice_db
    ports:
      - "5435:5432"
    volumes:
      - orderservice_db_data:/var/lib/postgresql/data
    networks:
      - backend
    restart: always

  zookeeper:
    image: bitnami/zookeeper:latest
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"
    networks:
      - backend

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092

      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    networks:
      - backend
    # healthcheck:
    #   test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    # command:
    #   - sh
    #   - -c
    #   - |
    #     sleep 30
    #     kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic user-registered
    #     kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic user-profile-updated
    #     kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic product-created
    #     kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic inventory-updated
    #     kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1 --topic order-placed
    #     /opt/bitnami/scripts/kafka/run.sh

volumes:
  userservice_db_data:
  productservice_db_data:
  orderservice_db_data:

networks:
  backend:
    driver: bridge